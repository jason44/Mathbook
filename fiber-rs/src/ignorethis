
fn draw_grid(_commands: &mut Commands, canvas_info: &CanvasInfo) {
	let x_incr = canvas_info.i * canvas_info.grid_scale; // * canvas_info.global_scale;
	let y_incr = canvas_info.j * canvas_info.grid_scale; // * canvas_info.global_scale;
	println!("x_incr: {}, y_incr: {}", x_incr, y_incr);
	// we add an additional 32 increments so we can "extend" the grid without redrawing so often
	let x = canvas_info.width + (canvas_info.i * 16.0  * canvas_info.global_scale);
	let y = canvas_info.height + (canvas_info.j * 16.0 * canvas_info.global_scale);
	let l = canvas_info.translation.x.abs() + (x / 2.0);
	let h = canvas_info.translation.y.abs() + (y / 2.0);

	let mut builder = GeometryBuilder::new();
	let mut i: f32 = 0.0;
	while (i*x_incr) < l || (i*y_incr) < h {
		builder = builder.add(&Line(
			Vec2::new(i*x_incr, -h),
			Vec2::new(i*x_incr, h)
		)).add(&Line(
			Vec2::new((i*x_incr)*-1.0, -h),
			Vec2::new((i*x_incr)*-1.0, h)
		));	
		builder = builder.add(&Line(
			Vec2::new(-l, i*y_incr),
			Vec2::new(l, i*y_incr)
		)).add(&Line(
			Vec2::new(-l, (i*y_incr)*-1.0),
			Vec2::new(l, (i*y_incr)*-1.0)
		));
		i += 1.0;
	}

	_commands.spawn((
		ShapeBundle {
			path: builder.build(),
			..default()
		},
		Fill::color(PaintStyle::COLOR),
		Stroke::new(PaintStyle::COLOR, PaintStyle::THICKNESS),
		CanvasComponent,
	));
	// TODO, change the axes length and height after every couple translations
	let axes_builder = GeometryBuilder::new()
	.add(&Line(
		Vec2::new(0.0, -y - canvas_info.translation.y.abs()),
		Vec2::new(0.0, y + canvas_info.translation.y.abs())
	)).add(&Line(
		Vec2::new(-x - canvas_info.translation.x.abs(), 0.0),
		Vec2::new(x + canvas_info.translation.x.abs(), 0.0)
	));

	_commands.spawn((
		ShapeBundle {
			path: axes_builder.build(),
			transform: Transform::from_scale(Vec3::new(
				canvas_info.global_scale, 
				canvas_info.global_scale, 0.0
			)),
			..default()
		},
		Fill::color(PaintStyle::COLOR_MAJOR),
		Stroke::new(PaintStyle::COLOR_MAJOR, PaintStyle::THICKNESS_MAJOR),
		CanvasComponent,
	));
}